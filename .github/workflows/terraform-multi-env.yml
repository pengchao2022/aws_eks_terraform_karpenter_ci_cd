name: Terraform EKS with Karpenter

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment to deploy
        required: true
        options: [dev, staging, prod]
      action:
        type: choice
        description: Terraform action
        required: true
        options: [apply, destroy]
        default: apply
      stage:
        type: choice
        description: Deployment stage
        required: true
        options: [eks-iam, karpenter, full]
        default: full

env:
  TF_VERSION: 1.6.0

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: terraform init

    - name: Terraform Select Workspace
      run: |
        terraform workspace select ${{ github.event.inputs.environment }} || \
        terraform workspace new ${{ github.event.inputs.environment }}

    - name: Terraform Validate
      run: terraform validate

    - name: Deploy EKS and IAM
      if: github.event.inputs.action == 'apply' && (github.event.inputs.stage == 'eks-iam' || github.event.inputs.stage == 'full')
      run: |
        terraform apply -auto-approve \
          -target=module.eks \
          -target=module.iam \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars"

    - name: Wait for EKS Cluster
      if: github.event.inputs.action == 'apply' && github.event.inputs.stage == 'full'
      run: |
        CLUSTER_NAME=$(terraform output -raw cluster_name)
        echo "Waiting for cluster $CLUSTER_NAME to become active..."
        for i in {1..30}; do
          STATUS=$(aws eks describe-cluster --name $CLUSTER_NAME --query 'cluster.status' --output text 2>/dev/null || echo "CREATING")
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "Cluster is ACTIVE"
            break
          fi
          echo "Cluster status: $STATUS (attempt $i/30)"
          sleep 30
        done
        if [ "$STATUS" != "ACTIVE" ]; then
          echo "Cluster did not become active in time"
          exit 1
        fi

    - name: Deploy Karpenter
      if: github.event.inputs.action == 'apply' && (github.event.inputs.stage == 'karpenter' || github.event.inputs.stage == 'full')
      run: |
        terraform apply -auto-approve \
          -target=module.karpenter \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars"

    - name: Destroy Karpenter
      if: github.event.inputs.action == 'destroy' && (github.event.inputs.stage == 'karpenter' || github.event.inputs.stage == 'full')
      run: |
        terraform destroy -auto-approve \
          -target=module.karpenter \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars"

    - name: Destroy EKS and IAM
      if: github.event.inputs.action == 'destroy' && (github.event.inputs.stage == 'eks-iam' || github.event.inputs.stage == 'full')
      run: |
        terraform destroy -auto-approve \
          -target=module.eks \
          -target=module.iam \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars"